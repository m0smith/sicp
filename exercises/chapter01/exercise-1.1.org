* Exercise 1.1: 
  (page 26) 

Below is a sequence of expressions. What is the result
printed by the interpreter in response to each expression?  Assume
that the sequence is to be evaluated in the order in which it is
presented.


** 10
*** Scheme
#+BEGIN_SRC scheme
10
#+END_SRC
*** Clojure
#+BEGIN_SRC clojure
10
;;=> 10
#+END_SRC


** (+ 5 3 4)
#+BEGIN_SRC scheme
(+ 5 3 4)
#+END_SRC
#+BEGIN_SRC clojure
(+ 5 3 4)
;;=> 12
#+END_SRC


** (- 9 1)
#+BEGIN_SRC scheme
(- 9 1)
#+END_SRC
#+BEGIN_SRC clojure
(- 9 1)
;;=> 8
#+END_SRC

** (/ 6 2)
#+BEGIN_SRC scheme

#+END_SRC

#+BEGIN_SRC clojure
(/ 6 2)
;;=> 3
#+END_SRC

** (+ (* 2 4) (- 4 6))
#+BEGIN_SRC scheme
(+ (* 2 4) (- 4 6))
#+END_SRC

#+BEGIN_SRC clojure
(+ (* 2 4) (- 4 6))
;;=> 6
#+END_SRC

----------------------
#+BEGIN_SRC scheme
(define a 3)
(define b (+ a 1))
#+END_SRC

define in scheme ,in this context, maps directly to def in clojure

#+BEGIN_SRC clojure
(def a 3)
(def b (+ a 1))
;; => #'user.b
#+END_SRC

----------------------
#+BEGIN_SRC scheme
(+ a b (* a b))
#+END_SRC

#+BEGIN_SRC clojure
(+ a b (* a b))
;;=> 19
#+END_SRC

----------------------
#+BEGIN_SRC scheme
(= a b)
#+END_SRC


#+BEGIN_SRC clojure
(= a b)
;;=> false
#+END_SRC


----------------------
#+BEGIN_SRC scheme
  (if (and (> b a) (< b (* a b)))
    b
    a)
#+END_SRC

#+BEGIN_SRC clojure
  (if (and (> b a) (< b (* a b)))
    b
    a)
  ;; => 4
#+END_SRC

----------------------
#+BEGIN_SRC scheme
(cond ((= a 4) 6)
      ((= b 4) (+ 6 7 a))
      (else 25))
#+END_SRC

 cond in clojure works the same as in scheme but without the extra
 parans around each case.  Also, there is no else in clojure so
 anything that evaluates to truthy will work, with :else being
 traditional.

#+BEGIN_SRC clojure 
(cond (= a 4) 6
      (= b 4) (+ 6 7 a)
      :else 25)

;;=> 16
#+END_SRC


----------------------
#+BEGIN_SRC scheme
(+ 2 (if (> b a) b a))
#+END_SRC

#+BEGIN_SRC clojure
(+ 2 (if (> b a) b a))
;;=> 6
#+END_SRC

----------------------
#+BEGIN_SRC scheme
(* (cond ((> a b) a)
         ((< a b) b)
         (else -1))
   (+ a 1))
#+END_SRC

Again, remove extra parens

#+BEGIN_SRC clojure
(* (cond (> a b) a
         (< a b) b
         :else -1)
   (+ a 1))

;;=> 16
#+END_SRC


