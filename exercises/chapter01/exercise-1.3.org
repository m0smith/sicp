* Exercise 1.3

(page 27)

Define a procedure that takes three numbers as arguments and returns
the sum of the squares of the two larger numbers.

Solution

Using the 'square' and 'sum-of-squares' in the book from pages 16 and 17, create a
function 'largest-sum-of-squares' that adds the two largest of three
arguments passed to it.  Do this by finding the smallest of the three
and add the sqaure of the other two.

The 'least-first?' predicate returns true when the first arguement is
the smallest argument.  

** Scheme
#+BEGIN_SRC schema
(define (square x) (* x x))
(define (sum-of-squares x y)
    (+ (square x) (square y)))
#+END_SRC

** Clojure
#+BEGIN_SRC clojure
    
  (defn square [x] (* x x))
  (defn sum-of-squares [x y]
      (+ (square x) (square y)))
  
  (defn least-first? [x y z]
    (and (not (> x y)) (not (> x z))))
  
  (defn largest-sum-of-squares [x y z]
    (cond (least-first? x y z) (sum-of-squares y z)
          (least-first? y x z) (sum-of-squares x z)
          :else (sum-of-squares x y)))
  
    
#+END_SRC

   
